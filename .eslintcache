[{"/Volumes/Jack/Projects/grade-monitor/src/index.js":"1","/Volumes/Jack/Projects/grade-monitor/src/components/UserClasses.js":"2","/Volumes/Jack/Projects/grade-monitor/src/components/App.js":"3","/Volumes/Jack/Projects/grade-monitor/src/components/Login.js":"4","/Volumes/Jack/Projects/grade-monitor/src/components/Nav.js":"5","/Volumes/Jack/Projects/grade-monitor/src/components/CourseView.js":"6","/Volumes/Jack/Projects/grade-monitor/src/components/CourseNav.js":"7","/Volumes/Jack/Projects/grade-monitor/src/firebase.js":"8","/Volumes/Jack/Projects/grade-monitor/src/components/Logout.js":"9","/Volumes/Jack/Projects/grade-monitor/src/components/TableView.js":"10","/Volumes/Jack/Projects/grade-monitor/src/components/AddClassWeight.js":"11","/Volumes/Jack/Projects/grade-monitor/src/components/EditClass.js":"12","/Volumes/Jack/Projects/grade-monitor/src/components/Modal/ModalContainer.js":"13","/Volumes/Jack/Projects/grade-monitor/src/utils/gradeColor.js":"14","/Volumes/Jack/Projects/grade-monitor/src/components/AssignmentRow.js":"15","/Volumes/Jack/Projects/grade-monitor/src/components/Message.js":"16","/Volumes/Jack/Projects/grade-monitor/src/components/Modal/Modal.js":"17"},{"size":892,"mtime":1609035532090,"results":"18","hashOfConfig":"19"},{"size":8399,"mtime":1609979589190,"results":"20","hashOfConfig":"19"},{"size":592,"mtime":1610035913340,"results":"21","hashOfConfig":"19"},{"size":1373,"mtime":1609347356140,"results":"22","hashOfConfig":"19"},{"size":2938,"mtime":1610157404710,"results":"23","hashOfConfig":"19"},{"size":3942,"mtime":1609976673260,"results":"24","hashOfConfig":"19"},{"size":796,"mtime":1609641085480,"results":"25","hashOfConfig":"19"},{"size":984,"mtime":1609898818030,"results":"26","hashOfConfig":"19"},{"size":529,"mtime":1609020140180,"results":"27","hashOfConfig":"19"},{"size":11622,"mtime":1609988830930,"results":"28","hashOfConfig":"19"},{"size":3134,"mtime":1609813517190,"results":"29","hashOfConfig":"19"},{"size":2699,"mtime":1609723843960,"results":"30","hashOfConfig":"19"},{"size":1270,"mtime":1609609255230,"results":"31","hashOfConfig":"19"},{"size":491,"mtime":1609525936740,"results":"32","hashOfConfig":"19"},{"size":5174,"mtime":1609988858600,"results":"33","hashOfConfig":"19"},{"size":155,"mtime":1609813951260,"results":"34","hashOfConfig":"19"},{"size":673,"mtime":1609609219960,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"kvzzp8",{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/Volumes/Jack/Projects/grade-monitor/src/index.js",[],["75","76"],"/Volumes/Jack/Projects/grade-monitor/src/components/UserClasses.js",["77","78","79","80"],"import React from \"react\";\nimport Nav from \"./Nav\";\nimport CourseNav from \"./CourseNav\";\nimport CourseView from \"./CourseView\";\n\nimport {auth, db} from \"../firebase\";\n\nimport \"./Blurb.css\";\nimport \"./UserClasses.css\";\nimport \"./Button.css\";\n\nvar userdb;\n\nexport default class UserClasses extends React.Component {\n    _isMounted = false;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            uid: null,\n            hasClasses: false,\n            classes: [],\n            course: {},\n            cachedCourse: {},\n            writes: 0\n        };\n\n        this.addClass = this.addClass.bind(this);\n        this.setCurCourse = this.setCurCourse.bind(this);\n        this.updateGrade = this.updateGrade.bind(this);\n        this.deleteWeightGroup = this.deleteWeightGroup.bind(this);\n        this.editClassName = this.editClassName.bind(this);\n        this.deleteClass = this.deleteClass.bind(this);\n        this.saveData = this.saveData.bind(this);\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        this.authSubscription = auth.onAuthStateChanged((user) => {\n            if (user && this._isMounted) {\n                this.setState({uid: user.uid});\n                userdb = db.collection('users').doc(user.uid);\n\n                userdb.collection('classes').get().then(snap => {\n                    if (snap.size > 0) {\n                        this.setState({hasClasses: true});\n                        let curClasses = [];\n                        snap.forEach(function(doc) {\n                            curClasses.push(doc.id);\n                        });\n                        this.setState({classes: curClasses,\n                                       curClassName: curClasses[0]});\n                        var classId = curClasses[0];\n\n                        let currentComponent = this;\n                        userdb.collection('classes').doc(classId).get().then(function(doc) {\n                            var curClass = doc.data();\n                            currentComponent.setState({course: doc.data(),\n                                                       cachedCourse: doc.data()});\n                        });\n                    } else {\n                        this.setState({hasClasses: false});\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Save data. App saves data here and when user switches to a different course.\n     */\n    componentWillUnmount () {\n        this._isMounted = false;\n    }\n\n    saveData(courseName = this.state.course.name) {\n        if (this.state.course !== this.state.cachedCourse && this.state.writes < 5000)\n            this.setState({cachedCourse: this.state.course,\n                           writes: this.state.writes + 1});\n\n            db.collection('users').doc(this.state.uid).collection(\"classes\").doc(courseName).set(this.state.course);\n    }\n\n    addClass (newClassName) {\n        if (this.state.hasClasses === true)\n            this.saveData();\n\n        let newClasses = this.state.classes;\n        newClasses.push(newClassName);\n\n        this.setState({hasClasses: true,\n                       curClassName: newClassName,\n                       classes: newClasses,\n                       course: {\n                            name: newClassName,\n                            grade: 100,\n                            weight_groups: [\n                                {   \n                                    id: 0,\n                                    name: \"Homework\",\n                                    grade: 100,\n                                    weight: 100,\n                                    assignments: [\n                                        { \n                                        name: \"Example Assignment\",\n                                        points_earned: 20,\n                                        points_possible: 20 },\n                                    ]\n                                },\n                            ]\n                       }}\n        );\n    }\n\n    addClassWeight(newWeightGroup) {\n        let newWeightGroups = this.state.course.weight_groups;\n        newWeightGroups.push(newWeightGroup);\n\n        let updatedGrade = 0;\n        for (let i = 0; i < newWeightGroups.length; i++) {\n            updatedGrade += newWeightGroups[i].grade * (newWeightGroups[i].weight / 100);\n        }\n\n        let course = this.state.course;\n        course.weight_groups = newWeightGroups;\n        course.grade = updatedGrade;\n\n        this.setState({course: course});\n    }\n\n    updateGrade (editedWeightGroup, id) {\n        let weightGroups = this.state.course.weight_groups;\n        weightGroups[id] = editedWeightGroup;\n\n        var updatedGrade = 0;\n        // compute weighted average\n        for (var i = 0; i < weightGroups.length; i++) {\n            updatedGrade += weightGroups[i].grade * (weightGroups[i].weight / 100);\n        }\n\n        let course = this.state.course;\n        course.weight_groups = weightGroups;\n        course.grade = updatedGrade;\n\n        console.log(JSON.stringify(course));\n\n        this.setState({course: course});\n    }\n\n    async setCurCourse (event) {\n        this.saveData();\n\n        const newCourseRef = db.collection('users').doc(this.state.uid).collection('classes').doc(event.target.value);\n        const newCourseDoc = await newCourseRef.get();\n        const newCourseData = newCourseDoc.data();\n\n        await this.setState({course: newCourseData});\n    }\n\n    deleteWeightGroup (weightGroupId) {\n        let updatedWeightGroups = this.state.course.weight_groups;\n        updatedWeightGroups.splice(weightGroupId, 1);\n\n        let updatedCourse = this.state.course;\n        updatedCourse.weight_groups = updatedWeightGroups;\n\n        this.setState({course: updatedCourse});\n        this.saveData();\n    }\n\n    async editClassName (oldName, newName) {\n        let updatedClasses = this.state.classes;\n        const courseIndex = updatedClasses.indexOf(oldName);\n        updatedClasses[courseIndex] = newName;\n\n        let updatedCourse = this.state.course;\n        updatedCourse.name = newName;\n\n        this.setState({classes: updatedClasses,\n                       course: updatedCourse});\n\n        const newDoc = await db.collection(\"users\").doc(this.state.uid).collection(\"classes\").doc(newName).set(updatedCourse);\n        const deleteOldDoc = await db.collection(\"users\").doc(this.state.uid).collection(\"classes\").doc(oldName).delete();\n\n\n    }\n\n    async deleteClass (course) {\n        const res = await db.collection('users').doc(this.state.uid).collection('classes').doc(course.name).delete();\n        \n        let updatedClasses = this.state.classes;\n        updatedClasses.splice(updatedClasses.indexOf(course.name), 1);\n        if (updatedClasses.length === 0) {\n            this.setState({\n                course: {},\n                classes: updatedClasses,\n                hasClasses: false,\n                cachedCourse: {}\n            });\n        } else {\n            const updatedCourseName = updatedClasses[0];\n            const courseRef = db.collection('users').doc(this.state.uid).collection('classes').doc(updatedCourseName);\n            const courseDoc = await courseRef.get();\n            const updatedCourse = courseDoc.data();\n            this.setState({\n                course: updatedCourse,\n                classes: updatedClasses,\n                cachedCourse: updatedCourse\n            });\n        }\n\n    }\n\n    render() {\n        return (\n            <div className=\"UserClasses\">\n                <Nav addClass={this.addClass}/>\n\n                {!this.state.hasClasses && <div id=\"container\">\n                    <div className=\"blurb\" id=\"message-blurb\">\n                        <p className=\"blurb-text\">It looks like you don’t have any classes yet! Let’s add one to get started.</p>\n                    </div>\n                </div>\n                }\n\n                {this.state.hasClasses && <div id=\"container\">\n                    <CourseNav classes={this.state.classes} curClass={this.state.course.name} setCurClass={this.setCurCourse}/>\n\n                    <CourseView course={this.state.course} key={this.state.course} saveData={this.saveData} deleteWeightGroup={this.deleteWeightGroup} deleteClass={this.deleteClass} editClassName={this.editClassName}/>\n\n                </div>}\n            </div>\n        );\n    }\n}\n","/Volumes/Jack/Projects/grade-monitor/src/components/App.js",[],"/Volumes/Jack/Projects/grade-monitor/src/components/Login.js",[],"/Volumes/Jack/Projects/grade-monitor/src/components/Nav.js",[],"/Volumes/Jack/Projects/grade-monitor/src/components/CourseView.js",["81","82"],"import React from \"react\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport TableView from \"./TableView\";\nimport AddClassWeight from \"./AddClassWeight\";\nimport EditClass from \"./EditClass\";\n\nimport gradeColor from \"../utils/gradeColor\";\n\nimport \"./UserClasses.css\";\nimport \"./Button.css\";\n\nexport default class UserClasses extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            course: this.props.course\n        }\n\n        this.updateGrade = this.updateGrade.bind(this);\n        this.addClassWeight = this.addClassWeight.bind(this);\n        this.editClassName = this.editClassName.bind(this);\n        this.deleteSelf = this.deleteSelf.bind(this);\n    }\n\n    componentDidUpdate (prevProps, prevState) {\n        if (this.props.course !== prevProps.course) {\n            this.setState({course: this.props.course});\n        }\n    }\n\n    addClassWeight(newWeightGroup) {\n        let newWeightGroups = this.state.course.weight_groups;\n        newWeightGroups.push(newWeightGroup);\n\n        let course = this.state.course;\n        course.weight_groups = newWeightGroups;\n\n        this.setState({course: course});\n    }\n\n    updateGrade (editedWeightGroup, id) {\n        let weightGroups = this.state.course.weight_groups;\n        weightGroups[id] = editedWeightGroup;\n\n        var updatedGrade = 0;\n        // compute weighted average\n        for (var i = 0; i < weightGroups.length; i++) {\n            const weight = weightGroups[i].weight;\n            const grade = weightGroups[i].grade;\n\n            updatedGrade += grade * (weight / 100);\n        }\n\n        let course = this.state.course;\n        course.weight_groups = weightGroups;\n        course.grade = Math.round(updatedGrade);\n\n        this.setState({course: course});\n    }\n\n    deleteSelf () {\n        this.props.deleteClass(this.state.course);\n    }\n\n    editClassName (oldName, newName) {\n        let updatedCourse = this.state.course;\n        updatedCourse.name = newName;\n        this.setState({course: updatedCourse});\n\n        this.props.editClassName(oldName, newName);\n    }\n\n    render () {\n        const thisComponent = this;\n\n        return (\n            <div id=\"container\">\n                {/* Current Course Grade Pill */}\n                <div className=\"gradeDisplayContainer\">\n                    <div className=\"gradeDisplayCol\"></div>\n                    <div className=\"gradeDisplayCol\"><h2 className=\"GradeDisplay\" style={{color: gradeColor(this.state.course.grade), borderColor: gradeColor(this.state.course.grade)}}>{Math.round(this.state.course.grade)}%</h2></div>\n                    <div className=\"gradeDisplayCol editClassContainer\"><EditClass editClassName={this.props.editClassName} deleteSelf={this.deleteSelf} name={this.state.course.name} /></div>\n                </div>\n\n                <AddClassWeight addWeight={this.addClassWeight} weightGroups={this.state.course.weight_groups} />\n\n                {/* <button id=\"add_class_weight\" onClick={this.addClassWeight}>Add Class Weight</button> */}\n\n                {/* Map tables of assignments */}\n                {this.state.course.weight_groups &&\n                    <div className=\"tableViewContainer\">\n                        {this.state.course.weight_groups.map(weightGroup => {\n                            return <TableView \n                                    className=\"table-view\" \n                                    weightGroup={weightGroup} \n                                    wid={weightGroup.id} \n                                    key={weightGroup.id} \n                                    saveData={this.props.saveData}\n                                    deleteWeightGroup={this.props.deleteWeightGroup} \n                                    updateTotalGrade={thisComponent.updateGrade}/>;\n                        })}\n                    </div>\n                }\n            </div>\n        );\n    }\n\n}","/Volumes/Jack/Projects/grade-monitor/src/components/CourseNav.js",[],"/Volumes/Jack/Projects/grade-monitor/src/firebase.js",[],"/Volumes/Jack/Projects/grade-monitor/src/components/Logout.js",[],"/Volumes/Jack/Projects/grade-monitor/src/components/TableView.js",[],"/Volumes/Jack/Projects/grade-monitor/src/components/AddClassWeight.js",["83"],"import React from \"react\";\nimport ModalContainer from \"./Modal/ModalContainer\";\nimport { Transition } from \"react-transition-group\";\nimport Message from \"./Message\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport \"./AddClassWeight.css\";\n\n\nexport default class AddClassWeight extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            newWeightGroupValue: '',\n            showErrorMessage: false\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n        this.modalContainer = React.createRef();\n    }\n\n    handleChange(event) {\n        this.setState({newWeightGroupValue: event.target.value});\n    }\n\n    handleSubmit (event) {\n        const weightGroups = this.props.weightGroups;\n\n        let alreadyContains = false;\n        for (let i = 0; i < weightGroups.length; i++) {\n            if (weightGroups[i].name === this.state.newWeightGroupValue) {\n                alreadyContains = true;\n                this.setState({showErrorMessage: true});\n                event.preventDefault();\n            }\n        }\n\n        if (!alreadyContains) {\n            this.modalContainer.current.closeModal();\n\n            const newWeightGroup = {\n                name: this.state.newWeightGroupValue,\n                id: weightGroups.length,\n                grade: 100,\n                weight: 0,\n                assignments: [\n                    { name: \"Example Assignment\",\n                      points_earned: 20,\n                      points_possible: 20 }\n                ]\n            };\n\n            this.setState({newWeightGroupValue: ''});\n            this.props.addWeight(newWeightGroup);\n\n            event.preventDefault();\n        }\n    }\n\n    closeErrorMessage () {\n\n    }\n\n    render() {\n        return (\n            <ModalContainer triggerText={'Add Weight Group'} onSubmit={this.handleSubmit} buttonStyle={\"add_class_weight\"} ref={this.modalContainer}>\n                <div id=\"modal_header\">\n                    <h2 id=\"form_title\">Add a Weight Group</h2>\n                    <button onClick={() => this.modalContainer.current.closeModal()} id=\"exit_button\">\n                        <FontAwesomeIcon icon={faTimes} />\n                    </button>\n                </div>\n                <form onSubmit={this.handleSubmit} id=\"class_form\">\n                    <label>\n                        <span id=\"input_title\">Weight Group Name<br/></span>\n                        <input type=\"text\" id=\"class_name_input\" value={this.state.newWeightGroupValue} placeholder=\"Ex. Quizzes\" onChange={this.handleChange}/>\n                    </label>\n                    <input type=\"submit\" value=\"Finish\" className=\"add_class\" id=\"submit\"/>\n                </form>\n                {this.state.alreadyContains && \n                    <Message text={\"Please use a unique name. You can't have multiple weight groups with the same name.\"} type={\"modalError\"}/>\n                }\n            </ModalContainer>\n        );\n    }\n}","/Volumes/Jack/Projects/grade-monitor/src/components/EditClass.js",[],"/Volumes/Jack/Projects/grade-monitor/src/components/Modal/ModalContainer.js",[],"/Volumes/Jack/Projects/grade-monitor/src/utils/gradeColor.js",[],"/Volumes/Jack/Projects/grade-monitor/src/components/AssignmentRow.js",["84","85","86"],"import React from \"react\";\nimport \"./Button.css\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nimport \"./AssignmentRow.css\";\n\nexport default class AssignmentRow extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            id: this.props.id,\n            assignment_name: this.props.assignment.name,\n            points_earned: this.props.assignment.points_earned,\n            points_possible: this.props.assignment.points_possible,\n            grade: this.setGrade(this.props.assignment.points_earned, this.props.assignment.points_possible)\n        }\n\n        this.updateAssignmentName = this.updateAssignmentName.bind(this);\n        this.updatePointsEarned = this.updatePointsEarned.bind(this);\n        this.updatePointsPossible = this.updatePointsPossible.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n    }\n\n    componentDidUpdate (prevProps, prevState) {\n        if (prevProps.assignment !== this.props.assignment) {\n            this.setState({id: this.props.id,\n                           assignment_name: this.props.assignment.name,\n                           points_earned: this.props.assignment.points_earned,\n                           points_possible: this.props.assignment.points_possible,\n                           grade: this.setGrade(this.props.assignment.points_earned, this.props.assignment.points_possible)});\n        }\n    }\n\n    setGrade (pointsEarned, pointsPossible) {\n        if (isNaN(pointsEarned)) pointsEarned = 0;\n        if (isNaN(pointsPossible)) pointsPossible = 1;\n\n        return (pointsEarned / pointsPossible) * 100;\n    }\n\n    updateAssignmentName (event) {\n        let updatedAssignmentName = event.target.value;\n\n        this.setState({assignment_name: updatedAssignmentName});\n\n        const updatedAssignment = {\n            id: this.state.id,\n            name: updatedAssignmentName,\n            points_possible: this.state.points_possible,\n            points_earned: this.state.points_earned\n        };\n\n        this.props.updateWeightGrade(updatedAssignment);\n    }\n\n    updatePointsEarned (event) {\n        const updatedPointsEarned = parseInt(event.target.value);\n        const updatedGrade = this.setGrade(updatedPointsEarned, this.props.points_possible);\n\n        this.setState({points_earned: updatedPointsEarned,\n                        grade: updatedGrade});\n        \n        const updatedAssignment = {\n            id: this.state.id,\n            name: this.state.assignment_name,\n            points_possible: this.state.points_possible,\n            points_earned: updatedPointsEarned\n        };\n\n        this.props.updateWeightGrade(updatedAssignment);\n    }\n\n    updatePointsPossible (event) {\n        const updatedPointsPossible = parseInt(event.target.value);\n        const updatedGrade = this.setGrade(this.props.points_earned, updatedPointsPossible);\n        this.setState({points_possible: updatedPointsPossible,\n                        grade: updatedGrade});\n\n        const updatedAssignment = {\n            id: this.state.id,\n            name: this.state.assignment_name,\n            points_possible: updatedPointsPossible,\n            points_earned: this.state.points_earned\n        };\n        \n        this.props.updateWeightGrade(updatedAssignment);\n    }\n\n    onBlur(event, inputType) {\n        if (event.target.value === '') {\n            this.setState({[inputType]: 0})\n        }\n        this.props.saveData();\n    }\n\n    render () {\n        return (\n            <>\n            <tr>\n                <td className=\"data\" className=\"assignment-field\">\n                    <input \n                        type=\"text\" \n                        className=\"assignment-input\" \n                        value={this.state.assignment_name} \n                        onChange={this.updateAssignmentName} \n                        onBlur={() => this.props.saveData()} />\n                </td>\n                <td className=\"data\" className=\"points-earned-field\">\n                    <input \n                        type=\"number\" \n                        className=\"points-earned-input\" \n                        value={this.state.points_earned} \n                        onChange={this.updatePointsEarned} \n                        onBlur={(e) => this.onBlur(e, 'points_earned')} />\n                </td>\n                <td className=\"data\" className=\"points-possible-field\">\n                    <input \n                        type=\"number\" \n                        className=\"points-possible-input\" \n                        value={this.state.points_possible} \n                        onChange={this.updatePointsPossible} \n                        onBlur={(e) => this.onBlur(e, 'points_possible')} />\n                </td>\n                <td className=\"data grade-field\">{Math.round(this.state.grade)}%</td>\n                <td className=\"data trashField deleteAssignmentField\"><button className=\"deleteAssignmentButton\" onClick={(e) => this.props.deleteAssignment(e, this.state.id)}><FontAwesomeIcon icon={faTrash} /></button></td>\n            </tr>\n            </>\n        )\n    }\n}","/Volumes/Jack/Projects/grade-monitor/src/components/Message.js",[],"/Volumes/Jack/Projects/grade-monitor/src/components/Modal/Modal.js",[],{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":58,"column":33,"nodeType":"93","messageId":"94","endLine":58,"endColumn":41},{"ruleId":"91","severity":1,"message":"95","line":183,"column":15,"nodeType":"93","messageId":"94","endLine":183,"endColumn":21},{"ruleId":"91","severity":1,"message":"96","line":184,"column":15,"nodeType":"93","messageId":"94","endLine":184,"endColumn":27},{"ruleId":"91","severity":1,"message":"97","line":190,"column":15,"nodeType":"93","messageId":"94","endLine":190,"endColumn":18},{"ruleId":"91","severity":1,"message":"98","line":2,"column":10,"nodeType":"93","messageId":"94","endLine":2,"endColumn":25},{"ruleId":"91","severity":1,"message":"99","line":2,"column":27,"nodeType":"93","messageId":"94","endLine":2,"endColumn":40},{"ruleId":"91","severity":1,"message":"100","line":3,"column":10,"nodeType":"93","messageId":"94","endLine":3,"endColumn":20},{"ruleId":"101","severity":1,"message":"102","line":103,"column":38,"nodeType":"103","endLine":103,"endColumn":66},{"ruleId":"101","severity":1,"message":"102","line":111,"column":38,"nodeType":"103","endLine":111,"endColumn":69},{"ruleId":"101","severity":1,"message":"102","line":119,"column":38,"nodeType":"103","endLine":119,"endColumn":71},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"no-unused-vars","'curClass' is assigned a value but never used.","Identifier","unusedVar","'newDoc' is assigned a value but never used.","'deleteOldDoc' is assigned a value but never used.","'res' is assigned a value but never used.","'TransitionGroup' is defined but never used.","'CSSTransition' is defined but never used.","'Transition' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation"]