{"version":3,"sources":["firebase.js","components/Login.js","components/Logout.js","components/Modal/Modal.js","components/Modal/ModalContainer.js","components/Nav/Nav.js","components/CourseNav/CourseNav.js","components/AssignmentRow/AssignmentRow.js","utils/gradeColor.js","components/UserClasses/UserClasses.js","components/TableView/TableView.js","components/Message/Message.js","components/AddClassWeight/AddClassWeight.js","components/EditClass/EditClass.js","components/CourseView.js","index.js","components/App.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","db","firestore","provider","GoogleAuthProvider","Login","history","useHistory","onClick","signInWithPopup","then","result","user","collection","doc","currentUser","uid","get","exists","console","log","set","name","displayName","catch","error","push","errorCode","code","errorMessage","message","email","id","Logout","props","signOut","text","Modal","onClickOutside","onKeyDown","modalRef","children","ReactDOM","createPortal","tag","role","tabIndex","className","ref","document","body","ModalContainer","state","isShown","showModal","setState","toggleScrollLock","closeModal","TriggerButton","focus","event","keyCode","modal","contains","target","querySelector","classList","toggle","Fragment","this","buttonStyle","n","triggerText","React","Component","Nav","newClassValue","width","window","innerWidth","handleChange","bind","handleSubmit","handleResize","modalContainer","createRef","addEventListener","value","current","grade","weight_groups","weight","assignments","points_earned","points_possible","addClass","preventDefault","addClassText","logoutText","icon","faPlus","faSignOutAlt","faTimes","onSubmit","type","placeholder","onChange","CourseNav","classes","map","course","curClass","setCurClass","AssignmentRow","assignment_name","assignment","setGrade","updateAssignmentName","updatePointsEarned","updatePointsPossible","onBlur","prevProps","prevState","pointsEarned","pointsPossible","isNaN","updatedAssignmentName","updatedAssignment","updateWeightGrade","updatedPointsEarned","parseInt","updatedGrade","updatedPointsPossible","inputType","saveData","e","Math","round","deleteAssignment","faTrash","gradeColor","color","r","g","b","dist","diff","userdb","TableView","weightGroup","new_assignment","new_points_earned","new_points_possible","new_grade","setWeight","setNewPointsEarned","setNewPointsPossible","setNewAssignment","updateGrade","addNewAssignment","weightOnBlur","weightNameOnBlur","deleteSelf","setWeightGroupName","newWeight","newWeightGroup","updateTotalGrade","deleteWeightGroup","edited_assignment","totalPointsEarned","totalPointsPossible","i","length","assignPE","assignPP","newGrade","newAssignments","newAssignment","_","assignmentId","updatedAssignments","splice","updatedWeightGroup","thisComponent","key","indexOf","faCheckCircle","style","backgroundColor","Message","AddClassWeight","newWeightGroupValue","showErrorMessage","weightGroups","alreadyContains","addWeight","EditClass","cachedClassName","deleteClass","editClassName","faPen","UserClasses","addClassWeight","newWeightGroups","editedWeightGroup","oldName","newName","updatedCourse","borderColor","wid","_isMounted","hasClasses","cachedCourse","writes","setCurCourse","authSubscription","onAuthStateChanged","snap","size","curClasses","forEach","curClassName","classId","currentComponent","data","courseName","newClassName","newClasses","JSON","stringify","a","newCourseRef","newCourseDoc","newCourseData","weightGroupId","updatedWeightGroups","updatedClasses","courseIndex","delete","updatedCourseName","courseRef","courseDoc","render","exact","path","component","useState","undefined","height","windowSize","setWindowSize","useEffect","innerHeight","removeEventListener","useWindowSize","getElementById"],"mappings":"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","file":"static/js/main.d9ff69a6.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyC8pGUbSqoBSn5ju472mJbJ_XkZEj6ltyI\",\n    authDomain: \"grade-monitor-424a1.firebaseapp.com\",\n    projectId: \"grade-monitor-424a1\",\n    storageBucket: \"grade-monitor-424a1.appspot.com\",\n    messagingSenderId: \"430105818915\",\n    appId: \"1:430105818915:web:8de01224017a4dfda83e96\",\n    measurementId: \"G-EQ1J7ZRLQB\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const auth = firebase.auth();\nexport const db = firebase.firestore();\nexport const provider = new firebase.auth.GoogleAuthProvider();","import React from 'react';\n\nimport { auth, db, provider } from '../firebase';\n\nimport { useHistory } from \"react-router-dom\";\n\nimport \"./Button.css\";\n\nfunction Login() {\n    let history = useHistory();\n\n    const login = () => auth.signInWithPopup(provider).then(function(result) {\n        var user = result.user;\n        var docRef = db.collection('users').doc(auth.currentUser.uid);\n        docRef.get().then(doc => {\n            if (doc.exists) {\n                console.log(\"user already exists\");\n                return user\n            } else {\n                db.collection(\"users\").doc(auth.currentUser.uid).set({\n                    name: user.displayName\n                }).then(function() {\n                    console.log(\"Document successfully written!\");\n                }).catch(function(error) {\n                    console.error(\"Error writing document: \", error);\n                });\n            }\n        })\n        \n        history.push(\"/classes\");\n      }).catch(function(error) {\n        // Handle Errors here.\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        // The email of the user's account used.\n        var email = error.email;\n        \n        console.error(errorCode + errorMessage + email);\n    });\n\n    return (\n        <button onClick={login} id=\"sign_in\">Login</button>\n    );\n}\n\nexport default Login;","import React from 'react';\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport { useHistory } from \"react-router-dom\";\n\nimport \"./Button.css\";\n\nfunction Logout(props) {\n    let history = useHistory();\n\n    const logout = () => firebase.auth().signOut().then(function() {\n        console.log(\"Logged Out!\");\n        history.push(\"/\");\n      }).catch(function(error) {\n        // An error happened.\n      });\n\n    return (\n        <button onClick={logout} id=\"sign_out\">{props.text}</button>\n    );\n}\n\nexport default Logout;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport FocusTrap from 'focus-trap-react';\n\nexport const Modal = ({\n  onClickOutside,\n  onKeyDown,\n  modalRef,\n  children\n}) => {\n  return ReactDOM.createPortal(\n    <FocusTrap>\n      <aside\n        tag=\"aside\"\n        role=\"dialog\"\n        tabIndex=\"-1\"\n        aria-modal=\"true\"\n        className=\"modal-cover\"\n        onClick={onClickOutside}\n        onKeyDown={onKeyDown}\n      >\n        <div className=\"modal-area\" ref={modalRef}>\n          <div className=\"modal-body\">\n              {children}\n          </div>\n        </div>\n      </aside>\n    </FocusTrap>,\n    document.body\n  );\n};\n\nexport default Modal;","import React from 'react';\nimport Modal from './Modal';\nimport \"./ModalContainer.css\";\nimport \"../Button.css\";\n\nexport class ModalContainer extends React.Component {\n\n  state = { isShown: false };\n\n  showModal = () => {\n    this.setState({ isShown: true });\n    this.toggleScrollLock();\n  };\n\n  closeModal = () => {\n    this.setState({ isShown: false });\n    this.TriggerButton.focus();\n    this.toggleScrollLock();\n  };\n\n  onKeyDown = (event) => {\n    if (event.keyCode === 27) {\n      this.closeModal();\n    }\n  };\n\n  onClickOutside = (event) => {\n    if (this.modal && this.modal.contains(event.target)) return;\n    this.closeModal();\n  };\n\n  toggleScrollLock = () => {\n    document.querySelector('html').classList.toggle('scroll-lock');\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <button className={this.props.buttonStyle} ref={(n) => (this.TriggerButton = n)} onClick={this.showModal}>{this.props.triggerText}</button>\n        {this.state.isShown ? (\n          <Modal\n            modalRef={(n) => (this.modal = n)}\n            onKeyDown={this.onKeyDown}\n            onClickOutside={this.onClickOutside}\n            children={this.props.children}\n          />\n        ) : null}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ModalContainer;","import React from \"react\";\nimport \"./Nav.css\";\nimport \"../Button.css\";\nimport Logout from \"../Logout\";\nimport ModalContainer from \"../Modal/ModalContainer\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimes, faPlus, faSignOutAlt } from '@fortawesome/free-solid-svg-icons'\n\nimport { auth, db } from \"../../firebase\";\n\nexport default class Nav extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newClassValue: '',\n            width: window.innerWidth\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleResize = this.handleResize.bind(this);\n\n        this.modalContainer = React.createRef();\n    }\n\n    componentDidMount () {\n        window.addEventListener('resize', this.handleResize)\n    }\n\n    handleResize() {\n        this.setState({width: window.innerWidth});\n    }\n\n    handleChange(event) {\n        this.setState({newClassValue: event.target.value});\n    }\n\n    handleSubmit(event) {\n        this.modalContainer.current.closeModal();\n        var userdb = db.collection('users').doc(auth.currentUser.uid);\n        \n        userdb.collection(\"classes\").doc(this.state.newClassValue).set({\n            name: this.state.newClassValue,\n            grade: 100,\n            weight_groups: [\n                {   \n                    id: 0,\n                    name: \"Homework\",\n                    grade: 100,\n                    weight: 100,\n                    assignments: [\n                        { name: \"Example Assignment\",\n                          points_earned: 20,\n                          points_possible: 20 },\n                    ]\n                },\n            ]\n        });\n\n        this.setState({newClassValue: ''});\n        this.props.addClass(this.state.newClassValue);\n        event.preventDefault();\n    }\n\n    render(){\n        let addClassText = 'Add Class';\n        let logoutText = 'Logout';\n        if (this.state.width <= 1090) {\n            addClassText = <FontAwesomeIcon icon={faPlus} />\n            logoutText = <FontAwesomeIcon icon={faSignOutAlt} />\n        }\n\n        return (\n            <div className=\"Nav\">\n                <h1 className=\"navHeader\">Grade Monitor</h1>\n                <div id=\"button-container\">\n                    <ModalContainer triggerText={addClassText} buttonStyle={\"add_class\"} ref={this.modalContainer}>\n                        <div id=\"modal_header\">\n                            <h2 id=\"form_title\">Add a Class</h2>\n                            <button onClick={() => this.modalContainer.current.closeModal()} id=\"exit_button\">\n                                <FontAwesomeIcon icon={faTimes} />\n                            </button>\n                        </div>\n                        <form onSubmit={this.handleSubmit} id=\"class_form\">\n                            <label>\n                                <span id=\"input_title\">Class Name<br/></span>\n                                <input type=\"text\" id=\"class_name_input\" value={this.state.newClassValue} placeholder=\"Ex. MATH 1110\" onChange={this.handleChange}/>\n                            </label>\n                            <input type=\"submit\" value=\"Finish\" className=\"finishButton\" id=\"submit\"/>\n                        </form>\n                    </ModalContainer>\n                    \n                    <Logout text={logoutText}/>\n                </div>\n            </div>\n        );\n    }\n}\n\n","import React from \"react\";\n\nimport \"./CourseNav.css\";\n\nexport default class CourseNav extends React.Component {\n\n    render () {\n        return (\n            <div className=\"courseNavContainer\">\n                {this.props.classes.map(course => {\n                        if (course === this.props.curClass) {\n                            return (\n                                <button id=\"course_button_active\" key={course}>{course}</button>\n                            );\n                        } else {\n                            return (\n                                <button id=\"course_button\" key={course} value={course} onClick={this.props.setCurClass}>{course}</button>\n                            );\n                        }\n                })}\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport \"../Button.css\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nimport \"./AssignmentRow.css\";\n\nexport default class AssignmentRow extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            id: this.props.id,\n            assignment_name: this.props.assignment.name,\n            points_earned: this.props.assignment.points_earned,\n            points_possible: this.props.assignment.points_possible,\n            grade: this.setGrade(this.props.assignment.points_earned, this.props.assignment.points_possible)\n        }\n\n        this.updateAssignmentName = this.updateAssignmentName.bind(this);\n        this.updatePointsEarned = this.updatePointsEarned.bind(this);\n        this.updatePointsPossible = this.updatePointsPossible.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n    }\n\n    componentDidUpdate (prevProps, prevState) {\n        if (prevProps.assignment !== this.props.assignment) {\n            this.setState({id: this.props.id,\n                           assignment_name: this.props.assignment.name,\n                           points_earned: this.props.assignment.points_earned,\n                           points_possible: this.props.assignment.points_possible,\n                           grade: this.setGrade(this.props.assignment.points_earned, this.props.assignment.points_possible)});\n        }\n    }\n\n    setGrade (pointsEarned, pointsPossible) {\n        if (isNaN(pointsEarned)) pointsEarned = 0;\n        if (isNaN(pointsPossible)) pointsPossible = 1;\n\n        return (pointsEarned / pointsPossible) * 100;\n    }\n\n    updateAssignmentName (event) {\n        let updatedAssignmentName = event.target.value;\n\n        this.setState({assignment_name: updatedAssignmentName});\n\n        const updatedAssignment = {\n            id: this.state.id,\n            name: updatedAssignmentName,\n            points_possible: this.state.points_possible,\n            points_earned: this.state.points_earned\n        };\n\n        this.props.updateWeightGrade(updatedAssignment);\n    }\n\n    updatePointsEarned (event) {\n        const updatedPointsEarned = parseInt(event.target.value);\n        const updatedGrade = this.setGrade(updatedPointsEarned, this.props.points_possible);\n\n        this.setState({points_earned: updatedPointsEarned,\n                        grade: updatedGrade});\n        \n        const updatedAssignment = {\n            id: this.state.id,\n            name: this.state.assignment_name,\n            points_possible: this.state.points_possible,\n            points_earned: updatedPointsEarned\n        };\n\n        this.props.updateWeightGrade(updatedAssignment);\n    }\n\n    updatePointsPossible (event) {\n        const updatedPointsPossible = parseInt(event.target.value);\n        const updatedGrade = this.setGrade(this.props.points_earned, updatedPointsPossible);\n        this.setState({points_possible: updatedPointsPossible,\n                        grade: updatedGrade});\n\n        const updatedAssignment = {\n            id: this.state.id,\n            name: this.state.assignment_name,\n            points_possible: updatedPointsPossible,\n            points_earned: this.state.points_earned\n        };\n        \n        this.props.updateWeightGrade(updatedAssignment);\n    }\n\n    onBlur(event, inputType) {\n        if (event.target.value === '') {\n            this.setState({[inputType]: 0})\n        }\n        this.props.saveData();\n    }\n\n    render () {\n        return (\n            <>\n            <tr>\n                <td className=\"data assignment-field\">\n                    <input \n                        type=\"text\" \n                        className=\"assignment-input\" \n                        value={this.state.assignment_name} \n                        onChange={this.updateAssignmentName} \n                        onBlur={() => this.props.saveData()} />\n                </td>\n                <td className=\"data points-earned-field\">\n                    <input \n                        type=\"number\" \n                        className=\"points-earned-input\" \n                        value={this.state.points_earned} \n                        onChange={this.updatePointsEarned} \n                        onBlur={(e) => this.onBlur(e, 'points_earned')} />\n                </td>\n                <td className=\"data points-possible-field\">\n                    <input \n                        type=\"number\" \n                        className=\"points-possible-input\" \n                        value={this.state.points_possible} \n                        onChange={this.updatePointsPossible} \n                        onBlur={(e) => this.onBlur(e, 'points_possible')} />\n                </td>\n                <td className=\"data grade-field\">{Math.round(this.state.grade)}%</td>\n                <td className=\"data trashField deleteAssignmentField\"><button className=\"deleteAssignmentButton\" onClick={(e) => this.props.deleteAssignment(e, this.state.id)}><FontAwesomeIcon icon={faTrash} /></button></td>\n            </tr>\n            </>\n        )\n    }\n}","export default function gradeColor (grade) {\n    // starting with green\n    let color = {\n        r: 54,\n        g: 222,\n        b: 54\n    };\n\n    const dist = 100-grade;\n    if (grade < 99) {\n        if (color.r + (dist * 14) <= 222) {\n            color.r += (dist * 14);\n        } else {\n            color.r = 222;\n            const diff = (dist * 14) - 168;\n            color.g -= diff / 2.5;\n        }\n    }\n\n    return ('rgba(' + color.r + ', ' + color.g + ', ' + color.b + ', 1.0)');\n}","import React from \"react\";\nimport Nav from \"../Nav/Nav\";\nimport CourseNav from \"../CourseNav/CourseNav\";\nimport CourseView from \"../CourseView\";\n\nimport {auth, db} from \"../../firebase\";\n\nimport \"../Blurb.css\";\nimport \"./UserClasses.css\";\nimport \"../Button.css\";\n\nvar userdb;\n\nexport default class UserClasses extends React.Component {\n    _isMounted = false;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            uid: null,\n            hasClasses: false,\n            classes: [],\n            course: {},\n            cachedCourse: {},\n            writes: 0\n        };\n\n        this.addClass = this.addClass.bind(this);\n        this.setCurCourse = this.setCurCourse.bind(this);\n        this.updateGrade = this.updateGrade.bind(this);\n        this.deleteWeightGroup = this.deleteWeightGroup.bind(this);\n        this.editClassName = this.editClassName.bind(this);\n        this.deleteClass = this.deleteClass.bind(this);\n        this.saveData = this.saveData.bind(this);\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        this.authSubscription = auth.onAuthStateChanged((user) => {\n            if (user && this._isMounted) {\n                this.setState({uid: user.uid});\n                userdb = db.collection('users').doc(user.uid);\n\n                userdb.collection('classes').get().then(snap => {\n                    if (snap.size > 0) {\n                        this.setState({hasClasses: true});\n                        let curClasses = [];\n                        snap.forEach(function(doc) {\n                            curClasses.push(doc.id);\n                        });\n                        this.setState({classes: curClasses,\n                                       curClassName: curClasses[0]});\n                        var classId = curClasses[0];\n\n                        let currentComponent = this;\n                        userdb.collection('classes').doc(classId).get().then(function(doc) {\n                            currentComponent.setState({course: doc.data(),\n                                                       cachedCourse: doc.data()});\n                        });\n                    } else {\n                        this.setState({hasClasses: false});\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Save data. App saves data here and when user switches to a different course.\n     */\n    componentWillUnmount () {\n        this._isMounted = false;\n    }\n\n    saveData(courseName = this.state.course.name) {\n        if (this.state.course !== this.state.cachedCourse && this.state.writes < 5000)\n            this.setState({cachedCourse: this.state.course,\n                           writes: this.state.writes + 1});\n\n            db.collection('users').doc(this.state.uid).collection(\"classes\").doc(courseName).set(this.state.course);\n    }\n\n    addClass (newClassName) {\n        if (this.state.hasClasses === true)\n            this.saveData();\n\n        let newClasses = this.state.classes;\n        newClasses.push(newClassName);\n\n        this.setState({hasClasses: true,\n                       curClassName: newClassName,\n                       classes: newClasses,\n                       course: {\n                            name: newClassName,\n                            grade: 100,\n                            weight_groups: [\n                                {   \n                                    id: 0,\n                                    name: \"Homework\",\n                                    grade: 100,\n                                    weight: 100,\n                                    assignments: [\n                                        { \n                                        name: \"Example Assignment\",\n                                        points_earned: 20,\n                                        points_possible: 20 },\n                                    ]\n                                },\n                            ]\n                       }}\n        );\n    }\n\n    addClassWeight(newWeightGroup) {\n        let newWeightGroups = this.state.course.weight_groups;\n        newWeightGroups.push(newWeightGroup);\n\n        let updatedGrade = 0;\n        for (let i = 0; i < newWeightGroups.length; i++) {\n            updatedGrade += newWeightGroups[i].grade * (newWeightGroups[i].weight / 100);\n        }\n\n        let course = this.state.course;\n        course.weight_groups = newWeightGroups;\n        course.grade = updatedGrade;\n\n        this.setState({course: course});\n    }\n\n    updateGrade (editedWeightGroup, id) {\n        let weightGroups = this.state.course.weight_groups;\n        weightGroups[id] = editedWeightGroup;\n\n        var updatedGrade = 0;\n        // compute weighted average\n        for (var i = 0; i < weightGroups.length; i++) {\n            updatedGrade += weightGroups[i].grade * (weightGroups[i].weight / 100);\n        }\n\n        let course = this.state.course;\n        course.weight_groups = weightGroups;\n        course.grade = updatedGrade;\n\n        console.log(JSON.stringify(course));\n\n        this.setState({course: course});\n    }\n\n    async setCurCourse (event) {\n        this.saveData();\n\n        const newCourseRef = db.collection('users').doc(this.state.uid).collection('classes').doc(event.target.value);\n        const newCourseDoc = await newCourseRef.get();\n        const newCourseData = newCourseDoc.data();\n\n        await this.setState({course: newCourseData});\n    }\n\n    deleteWeightGroup (weightGroupId) {\n        let updatedWeightGroups = this.state.course.weight_groups;\n        updatedWeightGroups.splice(weightGroupId, 1);\n\n        let updatedCourse = this.state.course;\n        updatedCourse.weight_groups = updatedWeightGroups;\n\n        this.setState({course: updatedCourse});\n        this.saveData();\n    }\n\n    async editClassName (oldName, newName) {\n        let updatedClasses = this.state.classes;\n        const courseIndex = updatedClasses.indexOf(oldName);\n        updatedClasses[courseIndex] = newName;\n\n        let updatedCourse = this.state.course;\n        updatedCourse.name = newName;\n\n        this.setState({classes: updatedClasses,\n                       course: updatedCourse});\n\n        const newDoc = await db.collection(\"users\").doc(this.state.uid).collection(\"classes\").doc(newName).set(updatedCourse);\n        const deleteOldDoc = await db.collection(\"users\").doc(this.state.uid).collection(\"classes\").doc(oldName).delete();\n\n\n    }\n\n    async deleteClass (course) {\n        const res = await db.collection('users').doc(this.state.uid).collection('classes').doc(course.name).delete();\n        \n        let updatedClasses = this.state.classes;\n        updatedClasses.splice(updatedClasses.indexOf(course.name), 1);\n        if (updatedClasses.length === 0) {\n            this.setState({\n                course: {},\n                classes: updatedClasses,\n                hasClasses: false,\n                cachedCourse: {}\n            });\n        } else {\n            const updatedCourseName = updatedClasses[0];\n            const courseRef = db.collection('users').doc(this.state.uid).collection('classes').doc(updatedCourseName);\n            const courseDoc = await courseRef.get();\n            const updatedCourse = courseDoc.data();\n            this.setState({\n                course: updatedCourse,\n                classes: updatedClasses,\n                cachedCourse: updatedCourse\n            });\n        }\n\n    }\n\n    render() {\n        return (\n            <div className=\"UserClasses\">\n                <Nav addClass={this.addClass}/>\n\n                {!this.state.hasClasses && <div id=\"container\">\n                    <div className=\"blurb noClassBlurb\" id=\"message-blurb\">\n                        <p className=\"blurb-text\">It looks like you don’t have any classes yet! Let’s add one to get started.</p>\n                    </div>\n                </div>\n                }\n\n                {this.state.hasClasses && <div id=\"container\">\n                    <CourseNav classes={this.state.classes} curClass={this.state.course.name} setCurClass={this.setCurCourse}/>\n\n                    <CourseView course={this.state.course} key={this.state.course} saveData={this.saveData} deleteWeightGroup={this.deleteWeightGroup} deleteClass={this.deleteClass} editClassName={this.editClassName}/>\n\n                </div>}\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport AssignmentRow from \"../AssignmentRow/AssignmentRow\";\nimport ModalContainer from \"../Modal/ModalContainer\"\n\nimport gradeColor from \"../../utils/gradeColor\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes, faCheckCircle } from '@fortawesome/free-solid-svg-icons';\n\nimport \"./TableView.css\";\n\nexport default class TableView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.weightGroup.id,\n            weight: this.props.weightGroup.weight,\n            assignments: this.props.weightGroup.assignments,\n            grade: this.props.weightGroup.grade,\n            name: this.props.weightGroup.name,\n            new_assignment: '',\n            new_points_earned: '',\n            new_points_possible: '',\n            new_grade: ''\n        };\n\n        this.setWeight = this.setWeight.bind(this);\n        this.setNewPointsEarned = this.setNewPointsEarned.bind(this);\n        this.setNewPointsPossible = this.setNewPointsPossible.bind(this);\n        this.setNewAssignment = this.setNewAssignment.bind(this);\n        this.updateGrade = this.updateGrade.bind(this);\n        this.addNewAssignment = this.addNewAssignment.bind(this);\n        this.weightOnBlur = this.weightOnBlur.bind(this);\n        this.weightNameOnBlur = this.weightNameOnBlur.bind(this);\n        this.deleteSelf = this.deleteSelf.bind(this);\n        this.setWeightGroupName = this.setWeightGroupName.bind(this);\n        this.deleteAssignment = this.deleteAssignment.bind(this);\n\n        this.modalContainer = React.createRef();\n    }\n\n    componentDidUpdate (prevProps, prevState) {\n        if (this.props.weightGroup !== prevProps.weightGroup) {\n            this.setState({id: this.props.weightGroup.id,\n                           weight: this.props.weightGroup.weight,\n                           assignments: this.props.weightGroup.assignments,\n                           grade: this.props.weightGroup.grade,\n                           name: this.props.weightGroup.name});\n        }\n    }\n\n    setWeightGroupName (event) {\n        this.setState({name: event.target.value});\n    }\n\n    setWeight (event) {\n        const newWeight = event.target.value;\n\n        this.setState({weight: newWeight});\n\n        const newWeightGroup = {\n            id: this.state.id,\n            name: this.props.weightGroup.name,\n            grade: this.state.grade,\n            assignments: this.state.assignments,\n            weight: newWeight\n        }\n\n        this.props.updateTotalGrade(newWeightGroup, this.state.id);\n    }\n\n    setNewPointsEarned(event) {\n        this.setState({new_points_earned: event.target.value});\n    }\n\n    setNewPointsPossible(event) {\n        this.setState({new_points_possible: event.target.value});\n    }\n\n    setNewAssignment (event) {\n        this.setState({new_assignment: event.target.value});\n    }\n\n    deleteSelf () {\n        this.modalContainer.current.closeModal();\n        this.props.deleteWeightGroup(this.state.id);\n    }\n\n    /** \n     * Update weight group grade based on an edited assignment object from assignment row.\n     *  Edited assignment must already be present in weight group.\n     */\n    updateGrade(edited_assignment) {\n        let assignments = this.state.assignments;\n        assignments[edited_assignment.id] = {\n            name: edited_assignment.name,\n            points_earned: edited_assignment.points_earned,\n            points_possible: edited_assignment.points_possible\n        }\n\n        let totalPointsEarned = 0;\n        let totalPointsPossible = 0;\n        for (let i = 0; i < assignments.length; i++) {\n            let assignPE = assignments[i].points_earned;\n            let assignPP = assignments[i].points_possible;\n\n            if (isNaN(assignPE)) assignPE = 0;\n            if (isNaN(assignPP)) assignPP = 1;\n\n            totalPointsEarned += assignPE;\n            totalPointsPossible += assignPP;\n        }\n\n        let newGrade = (totalPointsEarned / totalPointsPossible) * 100;\n        this.setState({assignments: assignments,\n                       grade: newGrade});\n\n        const newWeightGroup = {\n            id: this.state.id,\n            name: this.props.weightGroup.name,\n            grade: newGrade,\n            weight: this.state.weight,\n            assignments: assignments\n        }\n\n        this.props.updateTotalGrade(newWeightGroup, this.state.id);\n    }\n\n    addNewAssignment() {\n        if (this.state.new_assignment !== '' && this.state.new_points_earned !== '' && this.state.new_points_possible !== '') {\n            let newAssignments = this.state.assignments;\n            let newAssignment = {\n                name: this.state.new_assignment,\n                points_earned: parseInt(this.state.new_points_earned),\n                points_possible: parseInt(this.state.new_points_possible)\n            }\n            newAssignments.push(newAssignment);\n\n            let totalPointsEarned = 0;\n            let totalPointsPossible = 0;\n            for (let i = 0; i < newAssignments.length; i++) {\n                totalPointsEarned += newAssignments[i].points_earned;\n                totalPointsPossible += newAssignments[i].points_possible;\n            }\n\n            let newGrade = (totalPointsEarned / totalPointsPossible) * 100;\n            this.setState({assignments: newAssignments,\n                           grade: newGrade,\n                           new_assignment: '',\n                           new_points_earned: '',\n                           new_points_possible: ''});\n            \n            const newWeightGroup = {\n                id: this.state.id,\n                name: this.props.weightGroup.name,\n                grade: newGrade,\n                weight: this.state.weight,\n                assignments: newAssignments\n            }\n\n            this.props.updateTotalGrade(newWeightGroup, this.state.id);\n            this.props.saveData();\n        }\n    }\n\n    deleteAssignment (_, assignmentId) {\n        let updatedAssignments = this.state.assignments;\n        updatedAssignments.splice(assignmentId, 1);\n\n        let totalPointsEarned = 0;\n        let totalPointsPossible = 0;\n        for (let i = 0; i < updatedAssignments.length; i++) {\n            totalPointsEarned = totalPointsEarned + updatedAssignments[i].points_earned;\n            totalPointsPossible = totalPointsPossible + updatedAssignments[i].points_possible;\n        }\n\n        let newGrade = (assignmentId > 0) ? ((totalPointsEarned / totalPointsPossible) * 100) : 0;\n        this.setState({assignments: updatedAssignments,\n                       grade: newGrade});\n\n        const updatedWeightGroup = {\n            id: this.state.id,\n            name: this.state.name,\n            grade: newGrade,\n            weight: this.state.weight,\n            assignments: updatedAssignments\n        }\n\n        this.props.updateTotalGrade(updatedWeightGroup, this.state.id);\n        this.props.saveData();\n    }\n\n    weightNameOnBlur (event) {\n        if (event.target.value === '') {\n            this.setState({name: this.props.weightGroup.name});\n        } else {\n            const newWeightGroup = {\n                id: this.state.id,\n                name: this.state.name,\n                grade: this.state.grade,\n                weight: this.state.weight,\n                assignments: this.state.assignments\n            }\n\n            this.props.updateTotalGrade(newWeightGroup, this.state.id);\n            this.props.saveData();\n        }\n    }\n\n    weightOnBlur (event) {\n        if (event.target.value === '') {\n            this.setState({weight: 0});\n        }\n        this.props.saveData();\n    }\n\n    render () {\n        const thisComponent = this;\n        const assignments = this.state.assignments;\n        return (\n            <div className=\"TableView\">\n                <div id=\"table-top\">\n                    {/* <h3 id=\"table-header\">{this.props.weightGroup.name}</h3> */}\n                    <input type=\"text\" className=\"weightGroupName\" value={this.state.name} onChange={this.setWeightGroupName} onBlur={this.weightNameOnBlur}/>\n                    <ModalContainer triggerText={<FontAwesomeIcon icon={faTimes}/>} buttonStyle={\"delete_button\"} ref={this.modalContainer}>\n                        <div id=\"modal_header\">\n                            <h2 id=\"form_title\">Are you sure?</h2>\n                            <button onClick={() => this.modalContainer.current.closeModal()} id=\"exit_button\">\n                                <FontAwesomeIcon icon={faTimes} />\n                            </button>\n                        </div>\n                        <p>Once you delete the weight group you will lose it forever. There is no going back from this decision.</p>\n                        <div className=\"button_container\">\n                            <button className=\"deleteWeightButton\" onClick={this.deleteSelf}>Delete Forever</button>\n                        </div>\n                    </ModalContainer>\n                </div>\n                <table className=\"weightTable\">\n                    <tbody>\n                        <tr id=\"header-row\">\n                            <th id=\"assignment-header\" className=\"assignment-field\">Assignment Name</th>\n                            <th className=\"points-earned-field\">Points Earned</th>\n                            <th className=\"points-possible-field\">Points Possible</th>\n                            <th id=\"grade-header\" className=\"grade-field\">Grade</th>\n                            <th className=\"deleteAssignmentField\"></th>\n                        </tr>\n                        {this.state.assignments.map(function(assignment, key) {\n                            return <AssignmentRow \n                                    assignment={assignment} \n                                    key={key} \n                                    updateWeightGrade={thisComponent.updateGrade} \n                                    id={assignments.indexOf(assignment)} \n                                    saveData={thisComponent.props.saveData}\n                                    deleteAssignment={thisComponent.deleteAssignment}/>;\n                        })}\n                        <tr>\n                            <td className=\"data assignment-field\"><input type=\"text\" className=\"new-assignment-input\" value={this.state.new_assignment} onChange={this.setNewAssignment}/></td>\n                            <td className=\"data points-earned-field\"><input type=\"number\" className=\"new-points-earned-input\" value={this.state.new_points_earned} onChange={this.setNewPointsEarned}/></td>\n                            <td className=\"data points-possible-field\"><input type=\"number\" className=\"new-points-possible-input\" value={this.state.new_points_possible} onChange={this.setNewPointsPossible}/></td>\n                            <td className=\"data grade-field\"><button className=\"add-new-assignment\" onClick={this.addNewAssignment} ><FontAwesomeIcon icon={faCheckCircle} className=\"add-new-assignment-text\" /></button></td>\n                            <td className=\"data deleteAssignmentField\"></td>\n                        </tr>\n                    </tbody>\n                </table>\n                <div id=\"table-bottom\">\n                    <div id=\"weight-input-container\">\n                        <h3 id=\"table-footer\">Weight</h3>\n                        <input type=\"text\" className=\"weight-input\" value={this.state.weight} onChange={this.setWeight} onBlur={this.weightOnBlur}/>\n                    </div>\n                    <h3 id=\"weight-grade\" style={{backgroundColor: gradeColor(this.state.grade)}}>{Math.round(this.state.grade)}%</h3>\n                </div>\n            </div>\n        );\n    }\n}","import \"./Message.css\";\n\nconst Message = (props) => {\n    return (\n        <div className={props.type}>{props.text}</div>\n    );\n}\n\nexport default Message;","import React from \"react\";\nimport ModalContainer from \"../Modal/ModalContainer\";\nimport Message from \"../Message/Message\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport \"./AddClassWeight.css\";\n\n\nexport default class AddClassWeight extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            newWeightGroupValue: '',\n            showErrorMessage: false\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n        this.modalContainer = React.createRef();\n    }\n\n    handleChange(event) {\n        this.setState({newWeightGroupValue: event.target.value});\n    }\n\n    handleSubmit (event) {\n        const weightGroups = this.props.weightGroups;\n\n        let alreadyContains = false;\n        for (let i = 0; i < weightGroups.length; i++) {\n            if (weightGroups[i].name === this.state.newWeightGroupValue) {\n                alreadyContains = true;\n                this.setState({showErrorMessage: true});\n                event.preventDefault();\n            }\n        }\n\n        if (!alreadyContains) {\n            this.modalContainer.current.closeModal();\n\n            const newWeightGroup = {\n                name: this.state.newWeightGroupValue,\n                id: weightGroups.length,\n                grade: 100,\n                weight: 0,\n                assignments: [\n                    { name: \"Example Assignment\",\n                      points_earned: 20,\n                      points_possible: 20 }\n                ]\n            };\n\n            this.setState({newWeightGroupValue: ''});\n            this.props.addWeight(newWeightGroup);\n\n            event.preventDefault();\n        }\n    }\n\n    closeErrorMessage () {\n\n    }\n\n    render() {\n        return (\n            <ModalContainer triggerText={'Add Weight Group'} onSubmit={this.handleSubmit} buttonStyle={\"add_class_weight\"} ref={this.modalContainer}>\n                <div id=\"modal_header\">\n                    <h2 id=\"form_title\">Add a Weight Group</h2>\n                    <button onClick={() => this.modalContainer.current.closeModal()} id=\"exit_button\">\n                        <FontAwesomeIcon icon={faTimes} />\n                    </button>\n                </div>\n                <form onSubmit={this.handleSubmit} id=\"class_form\">\n                    <label>\n                        <span id=\"input_title\">Weight Group Name<br/></span>\n                        <input type=\"text\" id=\"class_name_input\" value={this.state.newWeightGroupValue} placeholder=\"Ex. Quizzes\" onChange={this.handleChange}/>\n                    </label>\n                    <input type=\"submit\" value=\"Finish\" className=\"finishButton\" id=\"submit\"/>\n                </form>\n                {this.state.alreadyContains && \n                    <Message text={\"Please use a unique name. You can't have multiple weight groups with the same name.\"} type={\"modalError\"}/>\n                }\n            </ModalContainer>\n        );\n    }\n}","import React from \"react\";\nimport ModalContainer from \"../Modal/ModalContainer\";\n\nimport \"./EditClass.css\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes, faPen } from '@fortawesome/free-solid-svg-icons';\n\n\nexport default class EditClass extends React.Component{\n    constructor (props) {\n        super(props);\n        this.state = {\n            className: this.props.name,\n            cachedClassName: this.props.name\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.deleteClass = this.deleteClass.bind(this);\n\n        this.modalContainer = React.createRef();\n    }\n\n    componentDidUpdate (prevProps, prevState) {\n        if (this.props.name !== prevProps.name) {\n            this.setState({className: this.props.name,\n                           cachedClassName: this.props.name});\n        }\n    }\n\n    handleChange(event) {\n        this.setState({className: event.target.value});\n    }\n\n    onBlur(event) {\n        if (event.target.value === '') {\n            this.setState({className: this.state.cachedClassName});\n        }\n    }\n\n    handleSubmit (event) {\n        this.modalContainer.current.closeModal();\n        if (this.state.className !== this.state.cachedClassName) {\n            this.props.editClassName(this.state.cachedClassName, this.state.className);\n        }\n        event.preventDefault();\n    }\n\n    deleteClass (event) {\n        this.modalContainer.current.closeModal();\n        this.props.deleteSelf();\n        event.preventDefault();\n    }\n\n    render () {\n        return (\n            <ModalContainer \n                triggerText={<FontAwesomeIcon icon={faPen} />} \n                buttonStyle={\"editClassButton\"} \n                ref={this.modalContainer}>\n                <div id=\"modal_header\">\n                    <h2 id=\"form_title\">Edit Class</h2>\n                    <button onClick={() => this.modalContainer.current.closeModal()} id=\"exit_button\">\n                        <FontAwesomeIcon icon={faTimes} />\n                    </button>\n                </div>\n                <span id=\"input_title\">Class Name<br/></span>\n                <input type=\"text\" id=\"class_name_input\" value={this.state.className} onChange={this.handleChange} onBlur={this.onBlur}/>\n                <div className=\"submitContainer\">\n                    <button className=\"deleteWeightButton\" onClick={this.deleteClass}>Delete Class</button>\n                    <button className=\"finishButton\" onClick={this.handleSubmit}>Change Name</button>\n                </div>\n            </ModalContainer>\n        );\n    }\n}","import React from \"react\";\nimport TableView from \"./TableView/TableView\";\nimport AddClassWeight from \"./AddClassWeight/AddClassWeight\";\nimport EditClass from \"./EditClass/EditClass\";\n\nimport gradeColor from \"../utils/gradeColor\";\n\nimport \"./UserClasses/UserClasses.css\";\nimport \"./Button.css\";\n\nexport default class UserClasses extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            course: this.props.course\n        }\n\n        this.updateGrade = this.updateGrade.bind(this);\n        this.addClassWeight = this.addClassWeight.bind(this);\n        this.editClassName = this.editClassName.bind(this);\n        this.deleteSelf = this.deleteSelf.bind(this);\n    }\n\n    componentDidUpdate (prevProps) {\n        if (this.props.course !== prevProps.course) {\n            this.setState({course: this.props.course});\n        }\n    }\n\n    addClassWeight(newWeightGroup) {\n        let newWeightGroups = this.state.course.weight_groups;\n        newWeightGroups.push(newWeightGroup);\n\n        let course = this.state.course;\n        course.weight_groups = newWeightGroups;\n\n        this.setState({course: course});\n    }\n\n    updateGrade (editedWeightGroup, id) {\n        let weightGroups = this.state.course.weight_groups;\n        weightGroups[id] = editedWeightGroup;\n\n        var updatedGrade = 0;\n        // compute weighted average\n        for (var i = 0; i < weightGroups.length; i++) {\n            const weight = weightGroups[i].weight;\n            const grade = weightGroups[i].grade;\n\n            updatedGrade += grade * (weight / 100);\n        }\n\n        let course = this.state.course;\n        course.weight_groups = weightGroups;\n        course.grade = Math.round(updatedGrade);\n\n        this.setState({course: course});\n    }\n\n    deleteSelf () {\n        this.props.deleteClass(this.state.course);\n    }\n\n    editClassName (oldName, newName) {\n        let updatedCourse = this.state.course;\n        updatedCourse.name = newName;\n        this.setState({course: updatedCourse});\n\n        this.props.editClassName(oldName, newName);\n    }\n\n    render () {\n        const thisComponent = this;\n\n        return (\n            <div id=\"container\">\n                {/* Current Course Grade Pill */}\n                <div className=\"gradeDisplayContainer\">\n                    <div className=\"gradeDisplayCol\"></div>\n                    <div className=\"gradeDisplayCol\"><h2 className=\"GradeDisplay\" style={{color: gradeColor(this.state.course.grade), borderColor: gradeColor(this.state.course.grade)}}>{Math.round(this.state.course.grade)}%</h2></div>\n                    <div className=\"gradeDisplayCol editClassContainer\"><EditClass editClassName={this.props.editClassName} deleteSelf={this.deleteSelf} name={this.state.course.name} /></div>\n                </div>\n\n                <AddClassWeight addWeight={this.addClassWeight} weightGroups={this.state.course.weight_groups} />\n\n                {/* Map tables of assignments */}\n                {this.state.course.weight_groups &&\n                    <div className=\"tableViewContainer\">\n                        {this.state.course.weight_groups.map(weightGroup => {\n                            return <TableView \n                                    className=\"table-view\" \n                                    weightGroup={weightGroup} \n                                    wid={weightGroup.id} \n                                    key={weightGroup.id} \n                                    saveData={this.props.saveData}\n                                    deleteWeightGroup={this.props.deleteWeightGroup} \n                                    updateTotalGrade={thisComponent.updateGrade}/>;\n                        })}\n                    </div>\n                }\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport UserClasses from './components/UserClasses/UserClasses.js';\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\n// import firebase from 'firebase/app';\n\n// const firebaseConfig = {\n//   apiKey: \"AIzaSyBAU-YOiXDHIB8SE8Kxga2s0rP5HqIW1Dw\",\n//   authDomain: \"grade-teller.firebaseapp.com\",\n//   projectId: \"grade-teller\",\n//   storageBucket: \"grade-teller.appspot.com\",\n//   messagingSenderId: \"635569088479\",\n//   appId: \"1:635569088479:web:9e18fedf576d978d45866a\",\n//   measurementId: \"G-SPYMRFR1P4\"\n// };\n\n// firebase.initializeApp(firebaseConfig);\n\nReactDOM.render(\n  <Router>\n    <Switch>\n      <Route exact path=\"/\" component={App} />\n      <Route path=\"/classes\" component={UserClasses} />\n    </Switch>\n  </Router>,\n  document.getElementById('root')\n);\n","import './App.css';\nimport './Blurb.css';\nimport Login from './Login.js';\nimport { useState, useEffect } from 'react';\n\nexport default function App() {\n    const width = useWindowSize().width;\n    console.log(width);\n    return (\n        <div className=\"App\">\n            {/* Desktop */}\n            {width > 450 && <>\n            <h1 className=\"blurbHeader\">Grade Monitor</h1>\n            <div className=\"blurb signInBlurb\">\n                <p className=\"blurb-text signInBlurbText\">Welcome to Grade Monitor. Enter your classes weighting and your assignments to dynamically see your current grade in the class and save it. You can come back throughout the semester to update your grades and see your current standing.</p>\n                <Login />\n            </div>\n            </>}\n\n            {/* Mobile */}\n            {width <= 450 && <>\n            <div className=\"blurb signInBlurb\">\n                <h1 className=\"blurbHeader\">Grade Monitor</h1>\n                <p className=\"blurb-text signInBlurbText\">Login to start tracking your grades.</p>\n            </div>\n            <Login />\n            </>}\n\n        </div>\n    );\n}\n\nfunction useWindowSize() {\n    const [windowSize, setWindowSize] = useState({\n      width: undefined,\n      height: undefined,\n    });\n  \n    useEffect(() => {\n      // Handler to call on window resize\n      function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight,\n        });\n      }\n      \n      // Add event listener\n      window.addEventListener(\"resize\", handleResize);\n      \n      // Call handler right away so state gets updated with initial window size\n      handleResize();\n      \n      // Remove event listener on cleanup\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }, []); // Empty array ensures that effect is only run on mount\n  \n    return windowSize;\n  }"],"sourceRoot":""}